// –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
window.achievements = [
    { id: 'coins_1000', name: '–ë–æ–≥–∞—á', description: '–°–æ–±–µ—Ä–∏ 1000 –º–æ–Ω–µ—Ç', condition: () => window.profile.coins >= 1000, reward: 50, completed: false },
    { id: 'clicks_100', name: '–¢–∞–ø –ú–∞—Å—Ç–µ—Ä', description: '–°–¥–µ–ª–∞–π 100 –∫–ª–∏–∫–æ–≤', condition: () => window.profile.clicks >= 100, reward: 30, completed: false },
    { id: 'level_5', name: '–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä', description: '–î–æ—Å—Ç–∏–≥–Ω–∏ 5 —É—Ä–æ–≤–Ω—è', condition: () => window.profile.level >= 5, reward: 100, completed: false },
];

// –ú–∞—Å—Å–∏–≤ –±–æ–Ω—É—Å–æ–≤
window.bonuses = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞
window.createBonus = function(rewardType, rewardAmount) {
    const bonusId = Date.now().toString();
    const bonus = {
        id: bonusId,
        type: rewardType,
        amount: rewardAmount,
        claimedBy: []
    };
    window.bonuses.push(bonus);

    const botToken = "7234958924:AAHCz8bNVMTWzoDF0DEeUhXr6eoF57Vpcl0";
    const chatId = "-1002648217133";
    const message = `üéÅ –ù–æ–≤—ã–π –±–æ–Ω—É—Å! –ü–æ–ª—É—á–∏ ${rewardAmount} ${rewardType === 'coins' ? '–º–æ–Ω–µ—Ç üí∞' : rewardType === 'energy' ? '—ç–Ω–µ—Ä–≥–∏–∏ ‚ö°' : 'XP üìà'}! –ö–æ–¥: ${bonusId}`;

    fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: "Markdown"
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.ok) {
            window.showNotification(`–ë–æ–Ω—É—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –ö–æ–¥: ${bonusId}`);
        } else {
            window.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞!");
            console.error("–û—à–∏–±–∫–∞:", data);
        }
    })
    .catch(error => {
        window.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram!");
        console.error("–û—à–∏–±–∫–∞:", error);
    });

    return bonusId;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞
window.claimBonus = function(bonusId, telegramUserId) {
    const bonus = window.bonuses.find(b => b.id === bonusId);
    if (!bonus) {
        return { success: false, message: "–ë–æ–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" };
    }

    if (window.profile.claimedBonuses.includes(bonusId)) {
        return { success: false, message: "–¢—ã —É–∂–µ –∑–∞–±—Ä–∞–ª —ç—Ç–æ—Ç –±–æ–Ω—É—Å!" };
    }

    if (bonus.type === 'coins') {
        window.profile.coins += bonus.amount;
    } else if (bonus.type === 'energy') {
        window.profile.energy = Math.min(window.profile.energy + bonus.amount, window.profile.maxEnergy);
    } else if (bonus.type === 'xp') {
        window.profile.xp += bonus.amount;
        window.checkLevelUp();
    }

    window.profile.claimedBonuses.push(bonusId);
    bonus.claimedBy.push(telegramUserId);
    window.updateProfile();
    window.saveProfile();

    return { success: true, message: `–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +${bonus.amount} ${bonus.type === 'coins' ? '–º–æ–Ω–µ—Ç üí∞' : bonus.type === 'energy' ? '—ç–Ω–µ—Ä–≥–∏–∏ ‚ö°' : 'XP üìà'}` };
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
window.updateEnergy = function() {
    const maxEnergy = window.profile.energyUpgradeLevel > 0 ? window.profile.maxEnergyUpgraded : window.profile.maxEnergy;
    if (window.profile.energy < maxEnergy) {
        window.profile.energy = Math.min(window.profile.energy + 1, maxEnergy);
        window.updateProfile();
    }
};

// –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç–∞–ø–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ)
window.clickTapButton = function(event) {
    window.updateEnergy();
    const maxEnergy = window.profile.energyUpgradeLevel > 0 ? window.profile.maxEnergyUpgraded : window.profile.maxEnergy;
    if (window.profile.energy < 1) {
        window.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        const tapButton = document.getElementById('tap-button');
        tapButton.style.background = 'radial-gradient(circle, rgba(255, 0, 0, 0.5) 0%, transparent 70%)';
        setTimeout(() => {
            tapButton.style.background = 'radial-gradient(circle, rgba(255, 140, 0, 0.3) 0%, transparent 70%)';
        }, 500);
        return;
    }
    window.profile.energy--;
    window.profile.clicks++;
    const coins = Math.floor(5 * window.profile.multitapLevel * (1 + window.profile.level * 0.1));
    window.profile.coins += coins;
    window.profile.xp += 10;

    const tapContainer = document.getElementById('tap-container');
    const offsetX = (Math.random() * 60 - 30);
    const offsetY = (Math.random() * 60 - 30);
    const tapText = document.createElement('div');
    tapText.className = 'tap-animation';
    tapText.innerText = `+${coins}`;
    tapText.style.left = `calc(50% + ${offsetX}px)`;
    tapText.style.top = `calc(50% + ${offsetY}px)`;
    tapContainer.appendChild(tapText);

    window.showNotification(`+${coins} –º–æ–Ω–µ—Ç! üòà`);
    window.checkLevelUp();
    window.checkAchievements();
    window.updateProfile();
};

// –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞"
window.playRockPaperScissors = function() {
    window.updateEnergy();
    const maxEnergy = window.profile.energyUpgradeLevel > 0 ? window.profile.maxEnergyUpgraded : window.profile.maxEnergy;
    if (window.profile.energy < 1) {
        window.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    window.profile.energy--;
    const progress = Math.floor((window.profile.xp / (window.profile.level * 100)) * 100);
    document.getElementById('main-content').innerHTML = `
        <button class="back-button hk-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ‚úä‚úÇÔ∏èüìú</h2>
        <button class="action hk-button" onclick="playRPS('–∫–∞–º–µ–Ω—å')">–ö–∞–º–µ–Ω—å ‚úä</button>
        <button class="action hk-button" onclick="playRPS('–Ω–æ–∂–Ω–∏—Ü—ã')">–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è</button>
        <button class="action hk-button" onclick="playRPS('–±—É–º–∞–≥–∞')">–ë—É–º–∞–≥–∞ üìú</button>
        <div class="profile-info">
            <h1 id="coin-counter">${window.profile.coins.toLocaleString()}</h1>
            <p>–ú—É–ª—å—Ç–∏—Ç–∞–ø: ${window.profile.multitapLevel}/${window.profile.maxMultitap} üëÜ</p>
            <div id="level-info">
                <span>GOLD ${window.profile.level}/${window.profile.maxLevel}</span>
                <div id="level-progress" style="width: ${progress}%;"></div>
                <span id="profit-per-hour">${window.profile.profitPerHour.toLocaleString()}</span>
            </div>
        </div>
    `;
    window.historyStack.push('playRockPaperScissors');
};

window.playRPS = function(playerChoice) {
    const choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const botChoice = choices[Math.floor(Math.random() * choices.length)];
    let result = '';
    if (playerChoice === botChoice) {
        result = '–ù–∏—á—å—è! ü§ù';
        window.profile.xp += 5;
    } else if (
        (playerChoice === '–∫–∞–º–µ–Ω—å' && botChoice === '–Ω–æ–∂–Ω–∏—Ü—ã') ||
        (playerChoice === '–Ω–æ–∂–Ω–∏—Ü—ã' && botChoice === '–±—É–º–∞–≥–∞') ||
        (playerChoice === '–±—É–º–∞–≥–∞' && botChoice === '–∫–∞–º–µ–Ω—å')
    ) {
        result = '–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ';
        const reward = Math.floor(50 * (1 + window.profile.level * 0.1));
        window.profile.coins += reward;
        let xp = window.profile.event && window.profile.event.effect === 'double_xp' ? 60 : 30;
        window.profile.xp += xp;
        window.showNotification(`–ü–æ–±–µ–¥–∞! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        window.checkLevelUp();
    } else {
        result = '–ü—Ä–æ–∏–≥—Ä—ã—à! üòø';
        window.profile.xp += 10;
    }
    const progress = Math.floor((window.profile.xp / (window.profile.level * 100)) * 100);
    document.getElementById('main-content').innerHTML = `
        <button class="back-button hk-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ‚úä‚úÇÔ∏èüìú</h2>
        <p>–¢–≤–æ–π –≤—ã–±–æ—Ä: ${playerChoice}</p>
        <p>–í—ã–±–æ—Ä –±–æ—Ç–∞: ${botChoice}</p>
        <p>${result}</p>
        <div class="profile-info">
            <h1 id="coin-counter">${window.profile.coins.toLocaleString()}</h1>
            <p>–ú—É–ª—å—Ç–∏—Ç–∞–ø: ${window.profile.multitapLevel}/${window.profile.maxMultitap} üëÜ</p>
            <div id="level-info">
                <span>GOLD ${window.profile.level}/${window.profile.maxLevel}</span>
                <div id="level-progress" style="width: ${progress}%;"></div>
                <span id="profit-per-hour">${window.profile.profitPerHour.toLocaleString()}</span>
            </div>
        </div>
    `;
    window.checkLevelUp();
    window.updateProfile();
};

// –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
window.playGuessNumber = function() {
    window.updateEnergy();
    const maxEnergy = window.profile.energyUpgradeLevel > 0 ? window.profile.maxEnergyUpgraded : window.profile.maxEnergy;
    if (window.profile.energy < 1) {
        window.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    window.profile.energy--;
    const number = Math.floor(Math.random() * 10) + 1;
    const progress = Math.floor((window.profile.xp / (window.profile.level * 100)) * 100);
    document.getElementById('main-content').innerHTML = `
        <button class="back-button hk-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üî¢</h2>
        <p>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:</p>
        <input id="guessInput" type="number" min="1" max="10">
        <button class="action hk-button" onclick="guessNumber(${number})">–£–≥–∞–¥–∞—Ç—å</button>
        <div class="profile-info">
            <h1 id="coin-counter">${window.profile.coins.toLocaleString()}</h1>
            <p>–ú—É–ª—å—Ç–∏—Ç–∞–ø: ${window.profile.multitapLevel}/${window.profile.maxMultitap} üëÜ</p>
            <div id="level-info">
                <span>GOLD ${window.profile.level}/${window.profile.maxLevel}</span>
                <div id="level-progress" style="width: ${progress}%;"></div>
                <span id="profit-per-hour">${window.profile.profitPerHour.toLocaleString()}</span>
            </div>
        </div>
    `;
    window.historyStack.push('playGuessNumber');
};

window.guessNumber = function(correctNumber) {
    const guess = parseInt(document.getElementById('guessInput').value);
    const progress = Math.floor((window.profile.xp / (window.profile.level * 100)) * 100);
    if (guess === correctNumber) {
        const reward = Math.floor(75 * (1 + window.profile.level * 0.1));
        window.profile.coins += reward;
        let xp = window.profile.event && window.profile.event.effect === 'double_xp' ? 100 : 50;
        window.profile.xp += xp;
        window.showNotification(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        window.checkLevelUp();
        window.showGames();
    } else {
        window.profile.xp += 20;
        document.getElementById('main-content').innerHTML = `
            <button class="back-button hk-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
            <h2>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üî¢</h2>
            <p>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ß–∏—Å–ª–æ –±—ã–ª–æ: ${correctNumber}</p>
            <div class="profile-info">
                <h1 id="coin-counter">${window.profile.coins.toLocaleString()}</h1>
                <p>–ú—É–ª—å—Ç–∏—Ç–∞–ø: ${window.profile.multitapLevel}/${window.profile.maxMultitap} üëÜ</p>
                <div id="level-info">
                    <span>GOLD ${window.profile.level}/${window.profile.maxLevel}</span>
                    <div id="level-progress" style="width: ${progress}%;"></div>
                    <span id="profit-per-hour">${window.profile.profitPerHour.toLocaleString()}</span>
                </div>
            </div>
        `;
        window.checkLevelUp();
    }
    window.updateProfile();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
window.checkLevelUp = function() {
    const xpNeeded = window.profile.level * 100;
    if (window.profile.xp >= xpNeeded && window.profile.level < window.profile.maxLevel) {
        window.profile.level++;
        window.profile.xp -= xpNeeded;
        window.showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${window.profile.level}! üéâ`);
        window.updateProfile();
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
window.checkAchievements = function() {
    window.achievements.forEach(achievement => {
        if (!achievement.completed && achievement.condition()) {
            achievement.completed = true;
            window.profile.coins += achievement.reward;
            window.showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}! +${achievement.reward} –º–æ–Ω–µ—Ç üéâ`);
            window.updateProfile();
            window.saveProfile();
        }
    });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
window.checkQuests = function(type) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–≤–µ—Å—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º
};